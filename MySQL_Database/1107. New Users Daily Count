Problem:

Table: Traffic

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| user_id       | int     |
| activity      | enum    |
| activity_date | date    |
+---------------+---------+
There is no primary key for this table, it may have duplicate rows.
The activity column is an ENUM type of ('login', 'logout', 'jobs', 'groups', 'homepage').
 

Write an SQL query that reports for every date within at most 90 days from today, the number of users that logged in for the first time on that date. Assume today is 2019-06-30.

The query result format is in the following example:

Traffic table:
+---------+----------+---------------+
| user_id | activity | activity_date |
+---------+----------+---------------+
| 1       | login    | 2019-05-01    |
| 1       | homepage | 2019-05-01    |
| 1       | logout   | 2019-05-01    |
| 2       | login    | 2019-06-21    |
| 2       | logout   | 2019-06-21    |
| 3       | login    | 2019-01-01    |
| 3       | jobs     | 2019-01-01    |
| 3       | logout   | 2019-01-01    |
| 4       | login    | 2019-06-21    |
| 4       | groups   | 2019-06-21    |
| 4       | logout   | 2019-06-21    |
| 5       | login    | 2019-03-01    |
| 5       | logout   | 2019-03-01    |
| 5       | login    | 2019-06-21    |
| 5       | logout   | 2019-06-21    |
+---------+----------+---------------+

Result table:
+------------+-------------+
| login_date | user_count  |
+------------+-------------+
| 2019-05-01 | 1           |
| 2019-06-21 | 2           |
+------------+-------------+
Note that we only care about dates with non zero user count.
The user with id 5 first logged in on 2019-03-01 so he's not counted on 2019-06-21.


Solution:

# Key Steps:
1. Use window function DENSE_RANK() to give the rank for all the date based on each user
2. Use WHERE clause to filter out the 'login' activity
3. Use sub-query and filter out all the conditions as below. 
4. Use WHERE clause to filter out the smallest date 
5. Use GROUP BY + COUNT() statement to aggreate the activity_date and count user numbers
6. Make sure using DISTINCT() to get the unique user_id. Otherwise, if there are users who did login activity multiple times on same day, you will get an error.
7. Use HAVING clause to filter out the date for most 90 days from today

# MySQL Solution:
SELECT activity_date AS login_date,
       COUNT(DISTINCT user_id) AS user_count
  FROM (
        SELECT *,
               DENSE_RANK() OVER (PARTITION BY user_id ORDER BY activity_date ASC) AS rk
          FROM Traffic
        WHERE activity = 'login'
       ) t
 WHERE rk = 1
GROUP BY 1
HAVING DATEDIFF('2019-06-30', activity_date) <= 90
